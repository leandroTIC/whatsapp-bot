import makeWASocket, { useSingleFileAuthState, DisconnectReason } from '@whiskeysockets/baileys';
import { Boom } from '@hapi/boom';
import qrcode from 'qrcode-terminal';
import fs from 'fs';

// Pasta para armazenar sess√£o
const SESSION_FILE = './session.json';

// Cria a pasta se n√£o existir
if (!fs.existsSync('./')) fs.mkdirSync('./');

// Usa autentica√ß√£o em arquivo √∫nico
const { state, saveState } = useSingleFileAuthState(SESSION_FILE);

// Cria a conex√£o
const sock = makeWASocket({
    printQRInTerminal: true,
    auth: state
});

// Salva altera√ß√µes de sess√£o
sock.ev.on('creds.update', saveState);

// Eventos de conex√£o
sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (qr) {
        qrcode.generate(qr, { small: true });
        console.log('‚ö° QR Code gerado! Escaneie com o WhatsApp.');
    }

    if (connection === 'close') {
        const reason = (lastDisconnect.error as Boom)?.output?.statusCode;
        console.log('‚ùå Conex√£o fechada', reason);
        if (reason !== DisconnectReason.loggedOut) {
            console.log('üîÑ Tentando reconectar...');
            startSock();
        } else {
            console.log('‚ö†Ô∏è Sess√£o desconectada, delete session.json e tente novamente.');
        }
    } else if (connection === 'open') {
        console.log('‚úÖ Conectado ao WhatsApp!');
    }
});

// Fun√ß√£o para reconectar
function startSock() {
    sock.ws.close();
}
