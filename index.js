import makeWASocket, { useMultiFileAuthState, DisconnectReason } from '@whiskeysockets/baileys'
import express from 'express'
import QRCode from 'qrcode'
import express from "express";
import fs from "fs";
import makeWASocket, { useMultiFileAuthState, DisconnectReason } from "@whiskeysockets/baileys";
import qrcode from "qrcode";

const app = express()
const PORT = process.env.PORT || 10000
const app = express();
const PORT = process.env.PORT || 10000;

let sock // socket global
let sock;       // conex√£o com o WhatsApp
let lastQR = null; // guarda o QR gerado para exibir no navegador

const startBot = async () => {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info')
// üî∏ Garante que a pasta de autentica√ß√£o existe
const AUTH_FOLDER = './auth';
if (!fs.existsSync(AUTH_FOLDER)) {
  fs.mkdirSync(AUTH_FOLDER);
  console.log('üìÅ Pasta "auth" criada para armazenar credenciais.');
}

// üü¢ Rota para exibir o QR Code no navegador
app.get("/qrcode", async (req, res) => {
  if (!lastQR) {
    return res.send("‚è≥ QR Code ainda n√£o gerado. Aguarde alguns segundos e atualize a p√°gina.");
  }
  const qrImg = await qrcode.toDataURL(lastQR);
  res.send(`<h2>Escaneie o QR Code com o n√∫mero OFICIAL: +55 77 98855-6030</h2><img src="${qrImg}" />`);
});

// üü° Rota de status
app.get("/", (req, res) => res.send("ü§ñ Bot WhatsApp rodando ‚úÖ"));

// üü¢ Inicializa servidor HTTP
app.listen(PORT, () => {
  console.log(`üåê Servidor HTTP ativo na porta ${PORT}`);
  startBot();
});

async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState(AUTH_FOLDER);

  sock = makeWASocket({
    printQRInTerminal: false,
    auth: state,
    printQRInTerminal: true
  })
    browser: ["Ubuntu", "Chrome", "22.04.4"], // Identifica√ß√£o do cliente
  });

  sock.ev.on('creds.update', saveCreds)
  sock.ev.on("creds.update", saveCreds);

  sock.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, qr } = update
  sock.ev.on("connection.update", (update) => {
    const { connection, qr, lastDisconnect } = update;

    if (qr) {
      // gera QR Code em URL para navegador
      const qrDataUrl = await QRCode.toDataURL(qr)
      console.log('‚ö° QR Code gerado! Acesse /qrcode para escanear')
      sock.qrDataUrl = qrDataUrl // guarda para servir na rota
      lastQR = qr;
      console.log("üì± QR Code gerado! Acesse /qrcode para escanear.");
    }

    if (connection === 'open') {
      console.log('‚úÖ Conectado ao WhatsApp!')
      enviarMensagemAutomatica(sock)
    } else if (connection === 'close') {
      const reason = lastDisconnect?.error?.output?.statusCode
    if (connection === "open") {
      console.log("‚úÖ Conectado ao WhatsApp com sucesso!");
      enviarMensagensAutomaticas();
    } else if (connection === "close") {
      const reason = lastDisconnect?.error?.output?.statusCode;
      if (reason !== DisconnectReason.loggedOut) {
        console.log('‚ö† Conex√£o caiu. Tentando reconectar...')
        startBot()
        console.log("‚ö†Ô∏è Conex√£o caiu. Tentando reconectar...");
        startBot();
      } else {
        console.log('‚ùå Desconectado. Fa√ßa login novamente.')
        console.log("‚ùå Sess√£o expirada. Ser√° necess√°rio escanear o QR novamente.");
      }
    }
  })
  });
}

// fun√ß√£o para enviar mensagem autom√°tica
function enviarMensagemAutomatica(sock) {
  if (!sock || !sock.authState) return console.log('Socket n√£o est√° pronto')
// üì® Envia mensagens autom√°ticas para uma lista de destinat√°rios
async function enviarMensagensAutomaticas() {
  // ‚úÖ Lista de destinat√°rios no formato correto
  const destinatarios = [
    "5577981434412@s.whatsapp.net", // Exemplo: seu n√∫mero pessoal
    "5577981145420@s.whatsapp.net"  // Outro exemplo
  ];

  const numero = '5577988556030@s.whatsapp.net' // n√∫mero desejado
  const mensagem = 'Ol√° üëã Esta √© uma mensagem autom√°tica!'
  const mensagem = "üëã Esta √© uma mensagem autom√°tica enviada pelo BOT oficial +55 77 98855-6030 ‚úÖ";

  sock.sendMessage(numero, { text: mensagem })
    .then(() => console.log('‚úÖ Mensagem enviada com sucesso!'))
    .catch(err => console.error('‚ùå Erro ao enviar mensagem:', err))
}

// rota principal para testar
app.get('/', (req, res) => {
  res.send('Bot WhatsApp rodando ‚úÖ')
})

// rota para QR Code
app.get('/qrcode', (req, res) => {
  if (sock?.qrDataUrl) {
    res.send(`<img src="${sock.qrDataUrl}" />`)
  } else {
    res.send('QR Code ainda n√£o gerado. Atualize em alguns segundos.')
  for (const numero of destinatarios) {
    try {
      await sock.sendMessage(numero, { text: mensagem });
      console.log(`üì§ Mensagem enviada com sucesso para ${numero}`);
    } catch (err) {
      console.error(`‚ùå Erro ao enviar para ${numero}:`, err);
    }
  }
})

// inicializa servidor e bot
app.listen(PORT, () => {
  console.log(`üåê Servidor HTTP ativo na porta ${PORT}`)
  startBot()
})
}
